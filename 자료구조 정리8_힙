Heap
   우선순위 큐(Priority Queue)
      데이터마다 우선순위가 존재
      우선순위가 높거나 / 낮은 데이터부터 반환
   위와 같은 구조 등에서 사용
   
   여러 값들 중 가장 큰 값/작은 값을 빠르게 찾기 위한 구조
   항상 완전이진트리 임

최대 힙/최소 힙
   부모 노드의 값이 자식 노드의 값보다 큼/작음
   위 규칙이 모든 노드에서 적용된다면, 루트노드는 항상 가장 큰/작은 값

삽입함수
   항상 완전 이진트리여야 함
   완전이진트리 이도록, 가장 마지막에 삽입
   
   부모노드와 삽입한 값을 비교하여, 
      최대/최소 힙 규칙과 다르다면 
      부모노드와 값을 교환

   규칙이 맞거나, 루트노드까지 갈 때까지 반복

삭제함수 
   root 노드에 있는 값을 반환
   항상 완전 이진트리이어야 함
   완전이진트리 이도록, 가장 마지막에 있는 값을 root로 이동
   현재 노드와 두 자식 중 더 큰 값을 비교
      자식이 더 크다면, 두 값을 교환 반복
   규칙이 맞거나 리프노드까지 갈 때까지 반복(현재 범위를 벗어나기 전 까지)




*/

#include<stdio.h>
#define MAX 16
char tree[MAX];
int size = 0;

inline int left(int x);
inline int right(int x);
inline int parent(int x);

void push(char data);
char pop();

int main() {
   push('G');
   push('D');
   push('H');
   push('E');
   push('A');
   push('I');
   push('J');
   push('K');

   printf("root %c\n", tree[1]); //tree[1]이 root임 1부터 번호 매겼으니까
   
   printf("pop : %c\n", pop());
   printf("pop : %c\n", pop());
   printf("pop : %c\n", pop());




}



void push(char data) {
   //완전이진트리 이도록, 
   //가장 마지막에 삽입
   
   int idx = size +1;
   tree[idx] = data;
   //루트노드까지 갈때까지 반복
   while (idx > 1) {
      //부모노드와 삽입한 값을 비교하여
      
      if (tree[parent(idx)] > data) {
         //규칙이 맞다면 반복 멈춤
         break;
      }
      else {
         //최대 힙 규칙과 다르다면 부모노드와 값을 교환
         tree[idx] = tree[parent(idx)];
         //tree[parent(idx)] = data;
         idx = parent(idx);
      }
      
   }
   tree[idx] = data;
   size++;
}

char pop() {
   //root 노드에 있는 값을 반환
   char res= tree[1];
   tree[1] = tree[size];
   size--;
   //가장 마지막에 있는 값을 root로 이동
   int idx = 1;
   while (1) {
      //규칙이 맞거나, 리프노드까지 갈때까지 반복
      //(현재 범위를 벗어나기 전 까지)
      int l = left(idx);
      int r = right(idx);
      //두 자식 중 더 큰 값이 누구인지
      int max;
      if (l==0 && r==0) {
         //현재 노드가 범위를 벗어났다면 중지
         break;
      }
      else if (r ==0 || l>r) {
         //왼쪽 노드가 더크다면
         max = l;
      }
      else {
         max = r;
      }
      char tmp;
      //현재 노드보다 자식이 더 크다면,
      if (tree[idx]<tree[max]) {
         //두 값을 교환
         tmp = tree[idx];
         tree[idx] = tree[max];
         tree[max] = tmp;
         idx = max;
      }
      else {
         //아니라면 중지
         break;
      }

   }
   return res;
}

//위에서 부터 노드에 1, 2, 3.. 이렇게 번호 매기면 한 왼쪽 자식은 그 (부모노드 번호 * 2 )가 되고 오른쪽 자식은 (부모노드번호 *2 +1)가 됨
//x번째 노드의 왼쪽 자식 노드 번호
inline int left(int x) {
   int res = x * 2;
   if (res > size) return 0;
   return res;
}
//x번째 노드의 오른쪽 자식 노드 번호 
inline int right(int x) {
   int res =  x * 2 + 1;
   if (res > size) return 0;
   return res;
}
//x번째 부모 노드 번호
inline int parent(int x) {
   return x / 2;
}
