1. 선택정렬

#include<stdio.h>
#include<stdlib.h>
#pragma warning(disable: 4996)

int main() {
	int n;
	int N;
	scanf("%d", &n);
	int* p = malloc(sizeof(int) * n);
	for (int i = 0; i < n; i++) {
		scanf("%d", &N);
		*(p + i) = N;
	}
	
	for (int i = 0; i < n; i++) {
		int min = i;
		for (int j = i; j < n; j++) {
			if (*(p + min) > * (p + j)) {
				min = j;
			}
		}
		int tmp = *(p + min);
		*(p + min) = *(p + i);
		*(p + i) = tmp;

	}
	for (int i = 0; i < n; i++) {
		printf("%d ", *(p + i));
	}

}

2. 삽입정렬
#include<stdio.h>
#include<stdlib.h>
#pragma warning(disable: 4996)

int main() {
	int n;
	scanf("%d", &n);
	int N;
	int j;

	int* p = malloc(sizeof(int) * n);
	for (int i = 0; i < n; i++) {
		scanf("%d", &N);
		*(p + i) = N;
	}
	
	for (int i = 0; i < n; i++) {
		int key = *(p + i);
		for (j = i; j > 0; j--) {
			if (*(p + j - 1) > key) {
				*(p + j) = *(p + j - 1);
			}
			else {
				break;
			}
		}
		*(p + j) = key;
	}
	for (int i = 0; i < n; i++) {
		printf("%d ", *(p + i));
	}

}  

3. 시간측정

#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<windows.h>
#pragma warning(disable: 4996)



int* ins_sort(int* p, int n);
int* sel_sort(int* p, int n);


int main() {
	int n;
	scanf("%d", &n);
	int* A = malloc(sizeof(int) * n);
	int* B = malloc(sizeof(int) * n);
	srand(time(NULL));
	for (int i = 0; i < n; i++) {
		*(A + i) = rand() % n;
		*(B + i) = *(A + i);
	}

	
	B = sel_sort(B, n);

	LARGE_INTEGER ticksPerSec;
	LARGE_INTEGER start, end, diff;

	QueryPerformanceFrequency(&ticksPerSec);
	QueryPerformanceCounter(&start);
	A = ins_sort(A, n);
	QueryPerformanceCounter(&end);
	diff.QuadPart = end.QuadPart - start.QuadPart;
	printf("time: %.12f sec\n", ((double)diff.QuadPart / (double)ticksPerSec.QuadPart));

	QueryPerformanceFrequency(&ticksPerSec);
	QueryPerformanceCounter(&start);
	B = sel_sort(B, n);
	QueryPerformanceCounter(&end);
	diff.QuadPart = end.QuadPart - start.QuadPart;
	printf("time: %.12f sec\n", ((double)diff.QuadPart / (double)ticksPerSec.QuadPart));

}

int* ins_sort(int* p, int n) {
	int j;
	for (int i = 0; i < n; i++) {
		int key = *(p + i);
		for (j = i; j > 0; j--) {
			if (*(p + j - 1) > key) {
				*(p + j) = *(p + j - 1);
			}
			else {
				break;
			}
		}
		*(p + j) = key;
	}
	return p;
}

int* sel_sort(int* p, int n) {
	for (int i = 0; i < n; i++) {
		int min = i;
		for (int j = i; j < n; j++) {
			if (*(p + min) > * (p + j)) {
				min = j;
			}
		}
		int tmp = *(p + min);
		*(p + min) = *(p + i);
		*(p + i) = tmp;

	}
	return p;
}
