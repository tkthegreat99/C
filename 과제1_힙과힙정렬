#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<windows.h>
#pragma warning(disable: 4996)




void buildHeap(int L[], int n);
int* buildList(int n, int min, int max);
void swap(int H[], int i, int j);
int left(int x);
int right(int x);
void heapify(int L[], int n, int i);
int findKthSmallest(int L[], int n, int k);

int main() {
	int* L;
	srand(time(NULL));
	LARGE_INTEGER ticksPerSec;
	LARGE_INTEGER start, end, diff;
	int output;
	L = buildList(10, 1, 100);
	for (int i = 0; i < 10; i++) {
		printf("%d ", L[i]);
	}
	printf("\n");
	
	for (int i = 1; i <= 3; i++) {
		printf("%d ", findKthSmallest(L, 10, i));
	}

	printf("\n");

	L = buildList(100000, 1, 1000000);
	int karray[4] = { 1, 100, 99900, 99999 };
	int e;

	for (int i = 0; i <= 3; i++) {
		QueryPerformanceFrequency(&ticksPerSec);
		QueryPerformanceCounter(&start);
		e = findKthSmallest(L, 100000, karray[i]);
		QueryPerformanceCounter(&end);
		diff.QuadPart = end.QuadPart -start.QuadPart;
		printf("%d  %.12f sec\n", e, ((double)diff.QuadPart / (double)ticksPerSec.QuadPart));
	}

}


//난수 생성
int* buildList(int n, int min, int max) {
	int* L = (int*)malloc(sizeof(int) * n);

	if (max < RAND_MAX) {
		for (int i = 0; i < n; i++) {
			L[i] = rand() % max + min;
		}
	}
	else {
		for (int i = 0; i < n; i++) {
			L[i] = ((((long) rand() << 15) | rand()) % 1000000) + 1;
		}
	}
	//이거 최댓값이 넘어가므로 기준을 이렇게 해주어야함.

	return L;
}

void heapify(int L[], int n, int i)
{
	int lar = i;
	int l = left(i); 
	int r = right(i); 

	
	if (l < n && L[l] > L[lar])
		lar = l;
	if (r < n && L[r] >L[lar])
		lar = r;
	if (lar != i) {
		swap(L, i, lar);
		heapify(L, n, lar);
	}
}
//heapify.

void buildHeap(int L[], int n) {
	int idx = (n / 2) -1 ;

	for (int i = idx; i >=0	; i--) {
		heapify(L, n, i);
	}
}
//최대힙으로 heap만들기

int findKthSmallest(int L[], int n, int k) {
	int *p = (int*)malloc(sizeof(int)*n);
	for (int i = 0; i < n; i++) {
		p[i] = L[i];
	}
	buildHeap(p, k);
	for (int i = k; i < n; i++) {
		if (p[i] < p[0]) {
			p[0] = p[i];
			heapify(p, k, 0);
		}
	}
	return p[0];
}
//최대힙의 루트는 힙에서 가장 큰 요소니까 힙에서 가장 작은 k개 요소를 추적후 루트 반환



void swap(int L[], int i, int j) {
	int tmp = L[i];
	L[i] = L[j];
	L[j] = tmp;
}

int left(int x) {
	int res = x * 2 +1 ;
	return res;
}

int right(int x) {
	int res = x * 2 + 2;
	return res;
}

