1.
#pragma warning(disable : 4996)
#include<stdio.h>
#include<stdlib.h>
#define MAX 1000


int visited[MAX];

typedef struct GraphNode {
	int ver;
	struct GraphNode* next;
}GraphNode;

typedef struct GraphType {
	int n;
	GraphNode* adj_list[MAX];
}GraphType;

typedef struct Queue {
	int element[MAX];
	int front, rear;
	int size;
}Queue;


void sort(GraphType* g, int v) {
	GraphNode* w, * k;
	w = g->adj_list[v];
	k = g->adj_list[v];
	int tmp;
	for (w = g->adj_list[v]; w; w = w->next) {
		for (k = w; k; k = k->next) {
			if (w != k && w->ver > k->ver) {
				tmp = w->ver;
				w->ver = k->ver;
				k->ver = tmp;
			}
		}
	}
}
void dfs(GraphType* g, int v) {
	GraphNode* w;
	visited[v] = 1;
	printf("%d\n", v);
	
	for (w = g->adj_list[v]; w; w = w->next) {
		if (!visited[w->ver]) {
			dfs(g, w->ver);
		}
	}
}


void graph_init(GraphType* g) {
	int v;
	g->n = 0;
	for (v = 0; v < MAX; v++) {
		g->adj_list[v] = NULL;
	}
}

void insert_ver(GraphType* g, int v) {
	if ((g->n) + 1 > MAX) {
		return;
	}
	g->n++;
}

void insert_edge(GraphType* g, int u, int v) {
	GraphNode* node;
	node = (GraphNode*)malloc(sizeof(GraphNode));
	node->ver = v;
	node->next = g->adj_list[u];
	g->adj_list[u] = node;

	
	GraphNode* node2;
	node2 = (GraphNode*)malloc(sizeof(GraphNode));
	node2->ver = u;
	node2->next = g->adj_list[v];
	g->adj_list[v] = node2;
	
}

int main() {
	int i;
	GraphType g;
	graph_init(&g);
	int n, m, s;
	scanf("%d %d %d", &n, &m, &s);
	//n이 정점개수
	//m이 간선개수
	//s가 시작정점
	for (i = 0; i < n; i++) {
		insert_ver(&g, i);
	}
	int a, b;
	for (i = 0; i < m; i++) {
		scanf("%d %d", &a, &b);
		insert_edge(&g, a, b);
	}
	for (i = 0; i < m; i++) {
		sort(&g, i);
	}

	dfs(&g, s);
}


2.

#include <stdio.h>
#pragma warning(disable: 4996)
int n, m, v;
#define MAX 1000
int visited_BFS[MAX], l[MAX][MAX], que[MAX];

void BFS(int idx)
{
	int i;
	int back = 1;
	int front = 1;
	int target;
	printf("%d\n", idx);
	que[back++] = idx;
	visited_BFS[idx] = 1;

	while (front < back) {
		target = que[front++];
		for (i = 1; i <= n; i++) {
			if (l[target][i] && !visited_BFS[i]) {
				printf("%d\n", i);
				que[back++] = i;
				visited_BFS[i] = 1;
			}
		}
	}
	return;
}

int main()
{
	scanf("%d %d %d", &n, &m, &v);

	int i;
	for (i = 1; i <= m; i++) {
		int a, b;
		scanf("%d %d", &a, &b);
		l[a][b] = l[b][a] = 1;
	}
	BFS(v);
}

