#그래프
- 노드끼리의 관계가 1:1이 아닌 자료구조 
- 사이클이 가능 
- 사이클: 노드를 따라가다 보면, 자기 자신이 다시 나올 수 있는 구조 
- 사이클이 있는 그래프는 "순환 그래프"
- 시작점 이라는 개념이 모호 

#트리(Tree)
- 특별한 그래프
- 방향성이 있는 그래프. 노드끼리의 연결이 단방향 
- 사이클이 불가능. 비순환 그래프
- 시작점 이라는 개념이 있음(Root노드)
- 계층 구조 

#용어 
Node: 트리를 구성하는 각 단위 
Root Node : 트리의 최상위 노드 

<다른 노드와의 관계>
Parent Node : 내 바로 위의 노드
Child Node : 내 바로 아래의 노드 
Sibling Node : 나와 부모가 같은 노드들 
Ancestor Node : 내 부모노드를 포함한 윗 단계 노드들 
Descendant Node : 내 자식노드를 포함한 아랫 단계 노드들 

<노드의 종류>
Leaf Node : 자식이 없는 노드(말단/ 단말 노드 라고도 부름)
Nonterminal Node : 자식이 있는 노드 (가지 노드) 

<트리의 생김새>
Sub-Tree : 트리 안의 특정 노드부터 해당 노드의 자손을 포함하면 트리 모양인데, 이를 서브트리라 부름. 
Forest : 여러개의 트리를 동시에 관리하는 경우 
level : Root노드를 1-level이라 하였을때, 단계별 층 수를 의미 
Depth : 특정 노드가 위치한 깊이(위치한 level)
Height : 해당 노드부터 시작한 서브트리가 총 몇층인지 
Degree(차수) : 
- 노드 : 노드의 차수는 해당 노드가 몇개의 자식을 가지고 있는지 
- 트리 : 트리에 포함된 노드들의 차수중 가장 높은 차수. 트리에 포함된 노드에 허용되는 최대 차수 

#이진 트리 (Binary Tree)
- 차수가 2인 트리 (트리에 포함된 모든 노드의 자식이 최대 2개인 트리) 

#이진 탐색 트리(Binar Search Tree)
- 이진트리이되, 임의의 노드의 왼쪽 자손은 모두 자신보다 작고, 오른쪽 자손은 모두 자신보다 큰 트리 

#이진 트리의 노드
| left | data | right |
왼쪽 자식과 오른쪽 자식, 그리고 데이터를 저장 

Skewed Binary Tree(편향트리)
- 한쪽으로 기울어진 트리
- 모든 자식이 한쪽방향에만 있는 트리 
- 각종 트리를 이용한 알고리즘에 불리

Complete Binary Tree(완전 이진 트리)
- 마지막 level을 제외한 모든 level이 가득 차있는 트리
- 마지막 level은 왼쪽부터 차야 함 

Full Binary Tree
- 모든 level이 가득 차 있는 트리 

#바이너리 트리 순회(Traversal)

전위 순회 ( Preorder traversal)
1. 현재 노드 방문
2. 왼쪽 노드 이동 
3. 오른쪽 노드로 이동 

중위 순회
1. 왼쪽 노드 이동
2. 현재 노드 방문 
3. 오른쪽 노드 이동 

후위 순회
1. 왼쪽 노드 이동 
2. 오른쪽 노드 이동 
3. 현재 노드 방문

#include <stdio.h>

typedef struct node {
   struct node* left;
   char data;
   struct node* right;
}NODE, *pNODE;


void preorder(pNODE curr);

int main(){
   NODE A = { .data = 'A' };
   NODE B = { .data = 'B' };
   NODE C = { .data = 'C' };
   NODE D = { .data = 'D' };
   NODE E = { .data = 'E' };
   NODE F = { .data = 'F' }; //언급 안한건 자동으로 0으로 초기화

   pNODE root = &A;
   A.left = &B;
   A.right = &C;
   B.left = &D;
   B.right = &E;
   C.left = &F;
   //root->left = &B;
   //root->right = &C;
   //root->left->left = &D;
   //root->left->right = &E;
   //root->right->left = &F;
   preorder(root);
   printf("\n");
   //A:B:D:E:C:F:
}

void preorder(pNODE curr) {
   //0. 탈출조건
   if (curr == NULL) return;
   //1. 현재 노드 방문
   printf("%c: ", curr->data);
   //2. 왼쪽 노드 이동
   preorder(curr->left);
   //3. 오른쪽 노드로 이동
   preorder(curr->right);
}
