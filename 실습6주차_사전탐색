1. #include<stdio.h>
#include<stdlib.h>
#pragma warning(disable: 4996)



int rFindElement(int *L, int k, int l, int r);
int findElement(int* L, int n, int k);



int main() {
	int n, k;
	int* L ;
	scanf("%d %d", &n, &k);
	L = (int*)malloc(sizeof(int) * n);
	for (int i = 0; i < n; i++) {
		scanf("%d", &L[i]);
	}
	printf(" %d", findElement(L, n, k));

	free(L);

}

int findElement(int* L, int n, int k) {
	return rFindElement(L, k, 0, n - 1);
}

int rFindElement(int *L, int k, int l, int r) {
	
	if (l > r) {
		return;
	}
	int mid = (l + r) / 2;
	if (k == L[mid]) {
		return mid;
	}
	else if (k < L[mid]) {
		return rFindElement(L, k, l, mid - 1);
	}
	else {
		return rFindElement(L, k, mid + 1, r);
	}
}

2.
#include<stdio.h>
#include<stdlib.h>
#pragma warning(disable: 4996)

int idx = -1;
int findElement(int* L, int n, int k);

int main() {
	int n, k;
	int* L;
	scanf("%d %d", &n, &k);
	L = (int*)malloc(sizeof(int) * n);
	for (int i = 0; i < n; i++) {
		scanf("%d", &L[i]);
	}

	if (findElement(L, n, k) == -1) {
		if (idx == -1) {
			printf(" %d", n);
		}
		else {
			printf(" %d", idx);
		}
	}
	else {
		printf(" %d", findElement(L, n, k));
	}
}



int findElement(int* L, int n, int k) {
	int mid;
	int l = 0;
	int r = n - 1;

	while (1) {
		if (l > r) { return -1; }
		mid = (l + r) / 2;
		if (k == L[mid]) {
			return mid;
		}
		else if (L[mid] > k) {
			if (idx == -1) {
				idx = mid;
			}
			else if (L[idx] > L[mid]) {
				idx = mid;
			}
			r = mid - 1;
		}
		else {
			l = mid + 1;
		}
	}
}

3. 
#include<stdio.h>
#include<stdlib.h>
#pragma warning(disable: 4996)

int main() {
	int a, b, n;
	int mid;
	char L[100];
	int k;
	scanf("%d %d %d", &a, &b, &n);
	
	
	int answer;
	
	getchar();
	scanf("%s", &L);
	char* p;
	
	for (p = L; *p != NULL; p++) {
		mid = (a + b) / 2;

		if (*p == 'Y') {
			a = mid+1;
		}
		else if (*p == 'N') {
			b = mid;
		}
		
		
	}
	answer = a;
	printf("%d", answer);
}
