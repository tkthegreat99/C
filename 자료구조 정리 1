
자료구조 - 자료들이 나열되어 있을 때 나열하는 방법/ 관리하는 방법

1. 순서가 있는 구조
 = 선형구조
   ex) 배열 -> 주소가 연속적

 Queue / Stack               / linked-list/ deque .....
(대기줄) (쌓다)

스택 -> 가장 위에 쌓고 가장 위에서 빼야됨 (선입후출) Last-in-First-out (LIFO)

큐 -> 가장 뒤에 들어가고 가장 앞에서 나감.(선입선출) First-in-First-out (FIFO)

   

2. 순서가 없는 구조    
 = 비선형구조
   ex) SNS, 트리 구조 (계층형) 

   tree, binary tree, b+ tree, graph ....

& (엔퍼센트) - 변수가 저장되어 있는 위치를 반환해주는 연산자. 포인터 변수를 만들 때 *앞의 자료형의 의미는 주소를 따라갔을 때 어떤 자료형의 데이터가 있을 지를 의미. 

---------------------------------------------------------------------------------------------------------

#include<stdio.h>
#pragma warning(disable: 4996)

int main() {
   printf("Hello world!\n");
   int a = 3;
   printf("%d\n", a);
   if (a == 3) {
      printf("a is 3\n");
   }
   else {
      printf("a is not 3!");
   }

   for  (int i = 0; i < a; i++)   // ctrl + spacebar 하면 for문 자동완성기능있음.
   {
      printf("*");
   }
   printf("\n"); 

   int* ptr;
   ptr = &a;
   printf("ptr : %d\n", *ptr);

   ptr = 0; 
   printf("ptr : %d\n", ptr);

   //ptr+1을 했는데, 1이 출력되게 해보세요.  -> 형 변환 하면 댐(int 4바이트 -> char 1바이트)
   printf("ptr+1 : %d\n", (char*)ptr+1);

   //ptr+1을 했는데, 8이 출력되게 해보세요.
   printf("ptr+1 : %d\n", (double*)ptr + 1);

   float* dp = &a;
   printf("*dp : %f\n", *dp);

   int data = 0xdeadbeaf; // 0xcafebabe
   unsigned char* cp = &data;

   printf("*cp : %x\n", *cp);
   printf("*cp+1 : %x\n", *(cp+1));
   printf("*cp+2 : %x\n", *(cp + 2));
   printf("*cp+3 : %x\n", *(cp + 3));
   
   int c;
   int list[4] = { 4,6,9,5 };

   printf("list : %d\n", list);
   printf("&c : %d\n", &c);
   printf("*list : %d\n", *(list+2));


   ptr = list;
   //배열은 그 주소를 바꿀순 없다. 

   printf("ptr[1] : %d\n", ptr[1]);
   //*(ptr+n) <=> ptr[n]

   int list2[3][2] = { {4, 7}, {65, 9}, {1, 34} };

   ptr = list2;
   printf("list2: %d\n", list2);
   printf("list2 + 1: %d\n", list2 + 1); // 8차이나는데 이건 int [2]라 4 X 2 = 8 
   printf("*list2: %d\n", *list2);

   printf("ptr :%d\n", ptr);
   printf("ptr+1 :%d\n", ptr+1); // 포인터는 그 와 다르게 무조건 int로 연산. +4
   printf("*ptr :%d\n", *ptr);
}
