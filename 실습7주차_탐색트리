1. 
#include<stdio.h>
#include<stdlib.h>
#pragma warning(disable: 4996)

typedef struct NODE {
	struct NODE* parent;
	int key;
	struct NODE* rChild;
	struct NODE* lChild;
}NODE;


int isExternal(NODE* p);
int isInternal(NODE* p);
NODE* sibling(NODE* p);
NODE* inOrderSucc(NODE* p);
void reduceExternal(NODE* p, NODE* root);
NODE* treeSearch(NODE* p, int k);
int removeElement(NODE* p, int k);
void insertItem(NODE* p, int k);
void print(NODE* p);
void freeTree(NODE* p);

int main() {
	int key, option;
	char input;
	NODE* p = (NODE*)malloc(sizeof(NODE));
	p->parent = NULL;
	p->rChild = NULL;
	p->lChild = NULL;
	while (1) {
		scanf("%c", &input);
		if (input == 'i') {
			scanf("%d", &key);
			insertItem(p, key);
			getchar();
		}
		else if (input == 'd') {
			scanf("%d", &key);
			option = removeElement(p, key);
			if (option == 0) {
				printf("X\n");
			}
			else {
				printf("%d\n", option);
			}
			getchar();
		}
		else if (input == 's') {
			scanf("%d", &key);
			if (treeSearch(p, key)->key != key) {
				printf("X\n");
			}
			else {
				printf("%d\n", treeSearch(p, key)->key);
			}
			getchar();
		}
		else if (input == 'p') {
			print(p);
			printf("\n");
		}
		else if (input == 'q') {
			break;
		}
	}
}

int isExternal(NODE* p) {
	if ((p->lChild == NULL) && (p->rChild == NULL)) {
		return 1;
	}
	else {
		return 0;
	}
	//True = 1, False = 0;
}

int isInternal(NODE* p) {
	if ((p->lChild != NULL) && (p->rChild != NULL)) {
		return 1;
	}
	else {
		return 0;
	}
	//True = 1, False = 0;
}

NODE* sibling(NODE* p) {
	if (p->parent == NULL) {
		return;
	}
	//isRoot check
	if (p->parent->lChild == p) {
		return p->parent->rChild;
	}
	else {
		return p->parent->lChild;
	}
}

NODE* inOrderSucc(NODE* p) {
	p = p->rChild;
	if (isExternal(p)) {
		return;
	}
	while (isInternal(p->lChild)) {
		p = p->lChild;
	}
	return p;
}

void reduceExternal(NODE* p, NODE* root) {
	NODE* w, * zs, * g;
	w = p->parent;
	zs = sibling(p);
	if (w->parent == NULL) {
		root->lChild = zs->lChild;
		root->rChild = zs->rChild;
		root->lChild->parent = zs;
		root->rChild->parent = zs;
		zs->parent = NULL;
	}
	//root로 바꿔줌.
	else {
		g = w->parent;
		zs->parent = g;
		if (w == g->lChild) {
			g->lChild = zs;
		}
		else if (w == g->rChild) {
			g->rChild = zs;
		}
	}
	free(p);
	free(w);
}

NODE* treeSearch(NODE* p, int k) {
	if (isExternal(p)) {
		return p;
	}
	if (p->key == k) {
		return p;
	}
	else if (k < p->key) {
		return treeSearch(p->lChild, k);
	}
	else {
		return treeSearch(p->rChild, k);
	}
}

void insertItem(NODE* p, int k) {
	NODE* l = (NODE*)malloc(sizeof(NODE));
	NODE* r = (NODE*)malloc(sizeof(NODE));
	NODE* w = treeSearch(p, k);
	if (isInternal(w)) {
		return;
	}
	else {
		w->key = k;
		w->lChild = l;
		w->rChild = r;
		l->parent = w;
		r->parent = w;
		l->lChild = NULL;
		l->rChild = NULL;
		r->lChild = NULL;
		r->rChild = NULL;
	}
}

int removeElement(NODE* p, int k) {
	NODE* w = treeSearch(p, k);
	NODE* y;
	if (isExternal(w)) {
		return 0;
	}
	int e = w->key;
	NODE* z = w->lChild;
	if (!isExternal(z)) {
		z = w->rChild;
	}
	if (isExternal(z)) {
		reduceExternal(z, w);
	}
	else {
		y = inOrderSucc(w);
		z = y->lChild;
		w->key = y->key;
		reduceExternal(z, w);
	}
	return e;
}

void print(NODE* p) {
	if (isExternal(p)) {
		return;
	}
	else {
		printf(" %d", p->key);
		print(p->lChild);
		print(p->rChild);
	}
}
#include<stdio.h>
#include<stdlib.h>
#pragma warning(disable: 4996)

typedef struct NODE {
	struct NODE* parent;
	int key;
	struct NODE* rChild;
	struct NODE* lChild;
}NODE;


int removeElement(NODE* p, int k);
void insertItem(NODE* p, int k);
void print(NODE* p);
void expandExternal(NODE* p);

NODE* root;
int isExternal(NODE* p);
int isInternal(NODE* p);
NODE* sibling(NODE* p);
NODE* inOrderSucc(NODE* p);
NODE* reduceExternal(NODE* p);
NODE* treeSearch(NODE* p, int k);


int main() {
	int key, option;
	char input;
	root = (NODE*)malloc(sizeof(NODE));
	root->parent = NULL;
	root->lChild = NULL;
	root->rChild = NULL;
	while (1) {
		scanf("%c", &input);
		if (input == 'i') {
			scanf("%d", &key);
			insertItem(root, key);
			getchar();
		}
		else if (input == 'd') {
			scanf("%d", &key);
			option = removeElement(root, key);
			if (option == key) {
				printf("%d\n", option);
			}
			else {
				printf("X\n");
			}
			getchar();
		}
		else if (input == 's') {
			scanf("%d", &key);
			if (treeSearch(root, key)->key != key) {
				printf("X\n");
			}
			else {
				printf("%d\n", treeSearch(root, key)->key);
			}
			getchar();
		}
		else if (input == 'p') {
			print(root); 
			printf("\n");
		}
		else if (input == 'q') {
			break;
		}
		else {
			continue;
		}
	}
}

int isExternal(NODE* p) {
	if ((p->lChild == NULL) && (p->rChild == NULL)) {
		return 1;
	}
	else {
		return 0;
	}
	//True = 1, False = 0;
}

int isInternal(NODE* p) {
	if ((p->lChild != NULL) || (p->rChild != NULL)) {
		return 1;
	}
	else {
		return 0;
	}
	//True = 1, False = 0;
}

NODE* sibling(NODE* p) {
	if (p->parent == NULL) {
		return;
	}
	//isRoot check
	if (p->parent->lChild == p) {
		return p->parent->rChild;
	}
	else {
		return p->parent->lChild;
	}
}

NODE* inOrderSucc(NODE* p) {
	p = p->rChild;
	if (isExternal(p)) {
		return;
	}
	while (isInternal(p->lChild)) {
		p = p->lChild;
	}
	return p;
}

NODE* reduceExternal(NODE* p) {
	NODE* w, * g;
	w = p->parent;
	NODE* zs = sibling(p);
	if (w->parent == NULL) {
		root = zs;
		zs->parent = NULL;
	}
	//root로 바꿔줌.
	else {
		g = w->parent;
		zs->parent = g;
		if (w == g->lChild) {
			g->lChild = zs;
		}
		else if (w == g->rChild) {
			g->rChild = zs;
		}
	}
    
    free(p);
    free(w);
	return zs;
}

NODE* treeSearch(NODE* p, int k) {
	if (isExternal(p)) {
		return p;
	}
	if (p->key == k) {
		return p;
	}
	else if (k < p->key) {
		return treeSearch(p->lChild, k);
	}
	else {
		return treeSearch(p->rChild, k);
	}
}

void insertItem(NODE* p, int k) {
	NODE* w = treeSearch(p, k);
	if (isInternal(w)) {
		return;
	}
	else {
		w->key = k;
		expandExternal(w);
		return;
	}
}

int removeElement(NODE* p, int k) {
	NODE* w = treeSearch(p, k);
	NODE* y;
	NODE* zs;
	if (isExternal(w)) {
		return -1;
	}
	int e = w->key;
	NODE* z = w->lChild;
	if (!isExternal(z)) {
		z = w->rChild;
	}
	if (isExternal(z)) {
		reduceExternal(z);
	}
	else {
		y = inOrderSucc(w);
		z = y->lChild;
		w->key = y->key;
		reduceExternal(z)   ;
	}
	return e;
}

void expandExternal(NODE* p) {
	NODE* l = (NODE*)malloc(sizeof(NODE));
	NODE* r = (NODE*)malloc(sizeof(NODE));
	l->lChild = NULL;
	l->rChild = NULL;
	l->parent = p;


	r->lChild = NULL;
	r->rChild = NULL;
	r->parent = p;


	p->lChild = l;
	p->rChild = r;

	return;
}
void print(NODE* p) {

	if (isExternal(p)) {
		return;
	}
	else {
		printf(" %d", p->key);
		print(p->lChild);
		print(p->rChild);
	}
}



2. 
#include<stdio.h>
#include<stdlib.h>
#pragma warning(disable: 4996)

typedef struct NODE {
	int key;
	int height;
	struct NODE* parent;
	struct NODE* lChild;
	struct NODE* rChild;
}NODE;

NODE* root;
int isInternal(NODE* p);
int isExternal(NODE* p);
NODE* sibling(NODE* p);
NODE* inOrderSucc(NODE* p);
NODE* treeSearch(NODE* p, int k);
void expandExternal(NODE* p);
NODE* reduceExternal(NODE* p);
int updateHeight(NODE* p);
int isBalanced(NODE* p);
NODE* restructure(NODE* x, NODE* y, NODE* z);
void searchAndFixAfterInsertion(NODE* p);
void print(NODE* p);
void insertItem(NODE* p, int k);


int main() {
	int key, option;
	char input;
	root = (NODE*)malloc(sizeof(NODE));
	root->parent = NULL;
	root->lChild = NULL;
	root->rChild = NULL;
	while (1) {
		scanf("%c", &input);
		if (input == 'i') {
			scanf("%d", &key);
			insertItem(root, key);
			getchar();
		}
		else if (input == 's') {
			scanf("%d", &key);
			getchar();
			if (treeSearch(root, key)->key != key) {
				printf("X\n");
			}
			else {
				printf("%d\n", treeSearch(root, key)->key);
			}
			
		}
		else if (input == 'p') {
			print(root);
			printf("\n");
		}
		else if (input == 'q') {
			break;
		}
	}


}





int isInternal(NODE* p) {
	if ((p->lChild != NULL) && (p->rChild != NULL)) {
		return 1;
	}
	else {
		return 0;
	}
	//True = 1, False = 0;
}


int isExternal(NODE* p) {
	if ((p->lChild == NULL) && (p->rChild == NULL)) {
		return 1;
	}
	else {
		return 0;
	}
	//True = 1, False = 0;
}

NODE* sibling(NODE* p) {	
	if (p->parent == NULL) {
		return;
	}
	//isRoot check
	if (p->parent->lChild == p) {
		return p->parent->rChild;
	}
	else {
		return p->parent->lChild;
	}
}

NODE* inOrderSucc(NODE* p) {
	p = p->rChild;
	if (isExternal(p)) {
		return;
	}
	while (isInternal(p->lChild)) {
		p = p->lChild;
	}
	return p;
}

NODE* treeSearch(NODE* p, int k) {
	if (isExternal(p)) {
		return p;
	}
	if (p->key == k) {
		return p;
	}
	else if (k < p->key) {
		return treeSearch(p->lChild, k);
	}
	else {
		return treeSearch(p->rChild, k);
	}
}

void expandExternal(NODE* p) {
	NODE* l = (NODE*)malloc(sizeof(NODE));
	NODE* r = (NODE*)malloc(sizeof(NODE));
	l->lChild = NULL;
	l->rChild = NULL;
	l->parent = p;
	l->height = 0;
	
	r->lChild = NULL;
	r->rChild = NULL;
	r->parent = p;
	r->height = 0;

	p->lChild = l;
	p->rChild = r;
	p->height = 1;
	return;
}

NODE* reduceExternal(NODE* p) {
	NODE* w, * zs, * g;
	w = p->parent;
	zs = sibling(p);
	if (w->parent == NULL) {
		root->lChild = zs->lChild;
		root->rChild = zs->rChild;
		root->lChild->parent = zs;
		root->rChild->parent = zs;
		zs->parent = NULL;
	}
	//root로 바꿔줌.
	else {
		g = w->parent;
		zs->parent = g;
		if (w == g->lChild) {
			g->lChild = zs;
		}
		else if (w == g->rChild) {
			g->rChild = zs;
		}
	}
	free(p);
	free(w);
	return zs;
}

int updateHeight(NODE* p) {
	int h;
	if (p->lChild->height > p->rChild->height) {
		h = p->lChild->height + 1;
	}
	else {
		h = p->rChild->height + 1;
	}
	if (h != p->height) {
		p->height = h;
		return 1;
		//success
	}
	else {
		return 0;
	}
}

int isBalanced(NODE* p) {
	if ((-1 <= (p->lChild->height - p->rChild->height)) && (1 >= (p->lChild->height - p->rChild->height))) {
		return 1;
	}
	else {
		return 0;
	}
}

NODE* restructure(NODE* x, NODE* y, NODE* z) {
	NODE* a, * b, * c;
	NODE* T0, * T1, * T2, * T3;
	if ((z->key < y->key) && (y->key < x->key)) {
		a = z;
		b = y;
		c = x;
		T0 = a->lChild;
		T1 = b->lChild;
		T2 = c->lChild;
		T3 = c->rChild;
	}
	else if ((x->key < y->key) && (y->key < z->key)) {
		a = x;
		b = y;
		c = z;
		T0 = a->lChild;
		T1 = a->rChild;
		T2 = b->rChild;
		T3 = c->rChild;
	}
	else if ((z->key < x->key) && (x->key < y->key)) {
		a = z;
		b = x;
		c = y;
		T0 = a->lChild;
		T1 = b->lChild;
		T2 = b->rChild;
		T3 = c->rChild;
	}
	else {
		a = y;
		b = x;
		c = z;
		T0 = a->lChild;
		T1 = b->lChild;
		T2 = b->rChild;
		T3 = c->rChild;
	}

	if (z->parent == NULL) {
		root = b;
		b->parent = NULL;
	}
	else if (z->parent->lChild == z) {
		z->parent->lChild = b;
		b->parent = z->parent;
	}
	else if (z->parent->rChild == z) {
		z->parent->rChild = b;
		b->parent = z->parent;
	}

	a->lChild = T0;
	T0->parent = a;
	a->rChild = T1;
	T1->parent = a;
	updateHeight(a);

	c->lChild = T2;
	T2->parent = c;
	c->rChild = T3;
	T3->parent = c;
	updateHeight(c);

	b->lChild = a;
	a->parent = b;
	b->rChild = c;
	c->parent = b;
	updateHeight(b);
	
	return b;
}

void searchAndFixAfterInsertion(NODE* p) {

	NODE* x, * y, * z;

	p->lChild->height = 0;
	p->rChild->height = 0;
	p->height = 1;

	if (p->parent == NULL) {
		return NULL;
	}
	z = p->parent;

	while (updateHeight(z) && isBalanced(z)) {
		if (z->parent == NULL) {
			return;
		}
		z = z->parent;
	}

	if (isBalanced(z)) {
		return;
	}

	//w에서 T의 루트로 향해 올라가다가 처음 만나는 불균형 노드를 z 그러한 z가 없다면 exit 
	if (z->lChild->height > z->rChild->height) {
		y = z->lChild;
	}

	else {
		y = z->rChild;
	}

	if (y->lChild->height > y->rChild->height) {
		x = y->lChild;	
	}

	else {
		x = y->rChild;
	}
	//z의 높은 자식을 y라 하자
	//y의 두 자식 중 어느 한 쪽이 높으면 높은 자식을 x라 하고 두 자식의 높이가 같으면 둘 중 y와 같은 쪽의 자식을 x로 선택한다.
	restructure(x, y, z);

	return;

}

void insertItem(NODE* p, int k) {
	NODE* w = treeSearch(p, k);
	if (isInternal(w)) {
		return;
	}

	else {
		w->key = k;
		expandExternal(w);
		searchAndFixAfterInsertion(w);
	}
}

void print(NODE* p) {
	if (isExternal(p)) {
		return;
	}
	else {
		printf(" %d", p->key);
		print(p->lChild);
		print(p->rChild);
	}
}
